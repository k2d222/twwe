import { LRParser } from '@lezer/lr'
import { LRLanguage, foldNodeProp, LanguageSupport } from '@codemirror/language'
import { styleTags, tags } from '@lezer/highlight'

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states:
    "(QQYQPOOO_QPO'#C`OdQPO'#C_OOQO'#DQ'#DQQYQPOOOOQO,58z,58zOrQPO'#CeOOQO'#DR'#DROwQPO'#CdO!PQPO'#ChO!UQPO'#CgOOQO'#Cd'#CdO!mQPO'#CcOOQO,58y,58yOOQO-E7O-E7OOOQO,59P,59POOQO-E7P-E7POOQO,59O,59OO!xQPO,59SO#WQPO'#CpO#]QQO'#CzO#bQPO'#C}OOQO'#DT'#DTO#gQPO,59RO$OQPO'#DPOwQPO'#DUO$TQPO,58}OOQO'#Cl'#ClOOQO'#DS'#DSO$`QPO'#CkOOQO1G.n1G.nO$qQPO1G.nO$vQPO,59[O${QPO,59fOOQO,59i,59iOOQO-E7R-E7ROOQO,59k,59kOOQO,59p,59pOOQO-E7S-E7SOOQO-E7Q-E7QOOQO7+$Y7+$YO%QQPO1G.vOOQO1G/Q1G/QO%`QPO'#CuOOQO'#Cr'#CrO%eQPO7+$bO%jQPO'#CxOOQO,59a,59aOOQO<<G|<<G|O%`QPO,59dO&OQPO,59dOOQO1G/O1G/OO%`QPO1G/OOOQO7+$j7+$j",
  stateData:
    '&Z~O{OSPOS~OTPO~OUTO~OYUO]XOTRXyRX~OU_O~OYUO]XO~O^bO~OYUOecOodOreOTZXyZX}ZX~O}hOTVXyVX~OUnOakObkOckO~O^pO~OpqO~OUrO~OYUOecOodOreOTZayZa}Za~OUtO~O}hOTVayVa~OakObkOckOU_Xm_X~OUxO~O^yO~OUzO~Og|Oh|Oj{Ok{O~O^!OO~OU!QO~OakObkOckOm!RO|!SOUlX~Om!UOUla~OPU~',
  goto: '$SyPPPz!OPP!S!V!]P!f!mPP!r!xPPP!bP!}PP#QPP#TP!bPP!bP#^#b#h#o#v#|TROSTQOSR]QQ[QRuiUVQWiTfYgSZQiRaWVYQWiQobR!S!OVlbm!OR}yR|yQ!P{Q!T!RR!V!UTi[jQSOR^SSWQiR`WSmb!ORwmQgYRsgQj[Rvj',
  nodeNames:
    'âš  Comment file Config Header HeaderTok EndLine Runs Run NoLayerCopy NoLayerCopy IndexRules IndexRule Index Int Orient Flag XFLIP YFLIP ROTATE Pos Pos PosRule EMPTY FULL TileSpec INDEX NOTINDEX SpecList OR Random Random Float NoDefaultRule NoDefaultRule NewRun',
  maxTerm: 45,
  skippedNodes: [0, 1],
  repeatNodeCount: 5,
  tokenData:
    "/Q~RaYZ!Wpq!]st!b{|!y}!O!y!O!P#S!Q![#j!g!h#z!h!i$i!k!l%Q!p!q&Z!q!r+S!r!s+_!t!u+p!z!{-V!{!|-t!}#O.c~!]OU~~!bO{~~!gSP~OY!bZ;'S!b;'S;=`!s<%lO!b~!vP;=`<%l!bR!|Q!O!P#S!Q![#jQ#VP!Q![#YQ#_QpQuv#e!Q![#YQ#jOpQR#qRpQ^Puv#e!O!P#Y!Q![#j~#}P!o!p$Q~$TP!r!s$W~$ZP!v!w$^~$aP!{!|$d~$iOg~~$lP!w!x$o~$rP!n!o$u~$xP!n!o${~%QOh~~%TQ!p!q%Z#b#c%r~%^P!f!g%a~%dP!g!h%g~%jP!z!{%m~%rOj~~%uP#W#X%x~%{P#X#Y&O~&RP#l#m&U~&ZO]~~&^R!q!r&g#X#Y'p#c#d(_~&jQ!p!q&p!v!w&{~&sP!g!h&v~&{O|~~'OP!k!l'R~'UP!p!q'X~'[P!f!g'_~'bP!g!h'e~'hP!z!{'k~'pOk~~'sP#k#l'v~'yP!t!u'|~(PP#i#j(S~(VP#b#c(Y~(_O}~~(bQ!f!g(h!n!o){~(kP#X#Y(n~(qP#Y#Z(t~(wP#T#U(z~(}P#i#j)Q~)TP#`#a)W~)ZP#h#i)^~)aP!t!u)d~)gP#i#j)j~)mP#`#a)p~)sP#X#Y)v~){Or~~*OP#T#U*R~*UP#m#n*X~*[P#X#Y*_~*bP#f#g*e~*hP!e!f*k~*nP#c#d*q~*tP#d#e*w~*zP#m#n*}~+SOY~~+VP!t!u+Y~+_Om~~+bP#c#d+e~+hP#g#h+k~+pOe~~+sQ!q!r+y#T#U,h~+|P!v!w,P~,SP!c!d,V~,YP!v!w,]~,`P!g!h,c~,hOc~~,kP#b#c,n~,qP#W#X,t~,wP#c#d,z~,}P#a#b-Q~-VOo~~-YP!h!i-]~-`P!n!o-c~-fP!k!l-i~-lP!r!s-o~-tOa~~-wP!h!i-z~-}P!n!o.Q~.TP!k!l.W~.ZP!r!s.^~.cOb~~.fTO#P.c#P#Q.u#Q;'S.c;'S;=`.z<%lO.c~.zOT~~.}P;=`<%l.c",
  tokenizers: [0, 1],
  topRules: { file: [0, 2] },
  tokenPrec: 238,
})

function foldDDNetConfig(node) {
  var _a, _b
  const from =
    (_b = (_a = node.firstChild) === null || _a === void 0 ? void 0 : _a.firstChild) === null ||
    _b === void 0
      ? void 0
      : _b.to // end of HeaderTok
  const to = node.to - 1 // before newline
  if (from) {
    return { from, to }
  } else {
    return null
  }
}
const DDNetRulesLanguage = LRLanguage.define({
  parser: parser.configure({
    props: [
      foldNodeProp.add({
        Config: foldDDNetConfig,
      }),
      styleTags({
        Header: tags.heading,
        Int: tags.integer,
        Float: tags.float,
        Comment: tags.lineComment,
        EndLine: tags.invalid,
        NewRun: tags.keyword,
        Index: tags.keyword,
        Pos: tags.keyword,
        Random: tags.keyword,
        NoDefaultRule: tags.keyword,
        NoLayerCopy: tags.keyword,
        XFLIP: tags.modifier,
        YFLIP: tags.modifier,
        ROTATE: tags.modifier,
        INDEX: tags.modifier,
        NOTINDEX: tags.modifier,
        EMPTY: tags.modifier,
        FULL: tags.modifier,
        OR: tags.modifier,
      }),
    ],
  }),
  languageData: {
    commentTokens: { line: '#' },
  },
})
function DDNetRules() {
  return new LanguageSupport(DDNetRulesLanguage)
}

export { DDNetRules, DDNetRulesLanguage }
